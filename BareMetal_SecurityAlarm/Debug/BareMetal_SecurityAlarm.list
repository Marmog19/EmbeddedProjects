
BareMetal_SecurityAlarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  4 .ARM          00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800046c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800046c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000089b  00000000  00000000  000104df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000023a  00000000  00000000  00010d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000053  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b1e  00000000  00000000  0001108b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000df4  00000000  00000000  00029ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b1af  00000000  00000000  0002a99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000f4  00000000  00000000  000b5b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b5c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800044c 	.word	0x0800044c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800044c 	.word	0x0800044c

08000204 <main>:
#include <stm32f4xx.h>

void GPIO_init(void);
void delay(int);

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	GPIO_init();
 8000208:	f000 f832 	bl	8000270 <GPIO_init>

    /* Loop forever */
	while(1){
		// check if the toggle (pin 9) is on
		if (GPIOA->IDR & (1 << 9)) {
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <main+0x68>)
 800020e:	691b      	ldr	r3, [r3, #16]
 8000210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000214:	2b00      	cmp	r3, #0
 8000216:	d01f      	beq.n	8000258 <main+0x54>
			// check if the armed signals (buttons on pin 6 and 7) are not pressed (1)
			if ((GPIOA->IDR & (1 << 7)) || (GPIOA->IDR & (1 << 6))) {
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <main+0x68>)
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000220:	2b00      	cmp	r3, #0
 8000222:	d105      	bne.n	8000230 <main+0x2c>
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x68>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800022c:	2b00      	cmp	r3, #0
 800022e:	d009      	beq.n	8000244 <main+0x40>
				GPIOA->ODR |= (1<<4); // turns on LED (breadboard)
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <main+0x68>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <main+0x68>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6153      	str	r3, [r2, #20]
				delay(50); // wait 10ms because of button bounce
 800023c:	2032      	movs	r0, #50	; 0x32
 800023e:	f000 f889 	bl	8000354 <delay>
 8000242:	e012      	b.n	800026a <main+0x66>
			}  else {
				GPIOA->ODR &= ~(1<<4); // turns off LED (breadboard)
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x68>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a08      	ldr	r2, [pc, #32]	; (800026c <main+0x68>)
 800024a:	f023 0310 	bic.w	r3, r3, #16
 800024e:	6153      	str	r3, [r2, #20]
				delay(50); // wait 10ms because of button bounce
 8000250:	2032      	movs	r0, #50	; 0x32
 8000252:	f000 f87f 	bl	8000354 <delay>
 8000256:	e7d9      	b.n	800020c <main+0x8>
			}
		} else {
			GPIOA->ODR &= ~(1<<4); // turns off LED (breadboard)
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <main+0x68>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a03      	ldr	r2, [pc, #12]	; (800026c <main+0x68>)
 800025e:	f023 0310 	bic.w	r3, r3, #16
 8000262:	6153      	str	r3, [r2, #20]
			delay(50); // wait 10ms because of button bounce
 8000264:	2032      	movs	r0, #50	; 0x32
 8000266:	f000 f875 	bl	8000354 <delay>
		if (GPIOA->IDR & (1 << 9)) {
 800026a:	e7cf      	b.n	800020c <main+0x8>
 800026c:	40020000 	.word	0x40020000

08000270 <GPIO_init>:
		}
	}
}

void GPIO_init(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	//Enable Clock Peripherals (GPIOA)
	RCC->AHB1ENR |= (1<<0); //Enables GPIOA peripheral (bit 0)
 8000274:	4b35      	ldr	r3, [pc, #212]	; (800034c <GPIO_init+0xdc>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4a34      	ldr	r2, [pc, #208]	; (800034c <GPIO_init+0xdc>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	; 0x30

	delay(1); 	// allow time for clock to start (???)
 8000280:	2001      	movs	r0, #1
 8000282:	f000 f867 	bl	8000354 <delay>

	/// OUTPUT
	// LED breadboard
	//Set GPIOA, PIN 4 as Output (MODER[9:8] = 01)
	GPIOA->MODER &= ~(1<<9); // clear bit 9
 8000286:	4b32      	ldr	r3, [pc, #200]	; (8000350 <GPIO_init+0xe0>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a31      	ldr	r2, [pc, #196]	; (8000350 <GPIO_init+0xe0>)
 800028c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000290:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<8); // set bit 8
 8000292:	4b2f      	ldr	r3, [pc, #188]	; (8000350 <GPIO_init+0xe0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <GPIO_init+0xe0>)
 8000298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029c:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<4); //Sets GPIOA, PIN 4 as push-pull
 800029e:	4b2c      	ldr	r3, [pc, #176]	; (8000350 <GPIO_init+0xe0>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	4a2b      	ldr	r2, [pc, #172]	; (8000350 <GPIO_init+0xe0>)
 80002a4:	f023 0310 	bic.w	r3, r3, #16
 80002a8:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<4); //Initializes GPIOA, PIN 4 as LOW
 80002aa:	4b29      	ldr	r3, [pc, #164]	; (8000350 <GPIO_init+0xe0>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a28      	ldr	r2, [pc, #160]	; (8000350 <GPIO_init+0xe0>)
 80002b0:	f023 0310 	bic.w	r3, r3, #16
 80002b4:	6153      	str	r3, [r2, #20]

	///INPUT
	// Armed Toggle (ON/OFF)
	//Set GPIOA, PIN 9 as Input (MODER[19:18] = 00)
	GPIOA->MODER &= ~(1<<19); // clear bit 19
 80002b6:	4b26      	ldr	r3, [pc, #152]	; (8000350 <GPIO_init+0xe0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a25      	ldr	r2, [pc, #148]	; (8000350 <GPIO_init+0xe0>)
 80002bc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002c0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<18); // clear bit 18
 80002c2:	4b23      	ldr	r3, [pc, #140]	; (8000350 <GPIO_init+0xe0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a22      	ldr	r2, [pc, #136]	; (8000350 <GPIO_init+0xe0>)
 80002c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002cc:	6013      	str	r3, [r2, #0]
	//Set GPIOA, PIN 9 as Pull-up (negative logic) (PUPDR[19:18] = 01)
	GPIOA->PUPDR &= ~(1<<19); // clear bit 19
 80002ce:	4b20      	ldr	r3, [pc, #128]	; (8000350 <GPIO_init+0xe0>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	4a1f      	ldr	r2, [pc, #124]	; (8000350 <GPIO_init+0xe0>)
 80002d4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002d8:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1<<18); // set bit 18
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <GPIO_init+0xe0>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <GPIO_init+0xe0>)
 80002e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e4:	60d3      	str	r3, [r2, #12]

	// Button 1
	//Set GPIOA, PIN 6 as Input (MODER[13:12] = 00)
	GPIOA->MODER &= ~(1<<13); // clear bit 13
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <GPIO_init+0xe0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a19      	ldr	r2, [pc, #100]	; (8000350 <GPIO_init+0xe0>)
 80002ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002f0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<12); // clear bit 12
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <GPIO_init+0xe0>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a16      	ldr	r2, [pc, #88]	; (8000350 <GPIO_init+0xe0>)
 80002f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002fc:	6013      	str	r3, [r2, #0]
	//Set GPIOA, PIN 6 as Pull-up (negative logic) (PUPDR[13:12] = 01)
	GPIOA->PUPDR &= ~(1<<13); // clear bit 13
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <GPIO_init+0xe0>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	4a13      	ldr	r2, [pc, #76]	; (8000350 <GPIO_init+0xe0>)
 8000304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000308:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1<<12); // set bit 12
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <GPIO_init+0xe0>)
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	4a10      	ldr	r2, [pc, #64]	; (8000350 <GPIO_init+0xe0>)
 8000310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000314:	60d3      	str	r3, [r2, #12]

	// Button 2
	//Set GPIOA, PIN 7 as Input (MODER[15:14] = 00)
	GPIOA->MODER &= ~(1<<15); // clear bit 15
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <GPIO_init+0xe0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <GPIO_init+0xe0>)
 800031c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000320:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<14); // clear bit 14
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <GPIO_init+0xe0>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <GPIO_init+0xe0>)
 8000328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800032c:	6013      	str	r3, [r2, #0]
	//Set GPIOA, PIN 7 as Pull-up (negative logic) (PUPDR[15:14] = 01)
	GPIOA->PUPDR &= ~(1<<15); // clear bit 13
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <GPIO_init+0xe0>)
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	4a07      	ldr	r2, [pc, #28]	; (8000350 <GPIO_init+0xe0>)
 8000334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000338:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1<<14); // set bit 12
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <GPIO_init+0xe0>)
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	4a04      	ldr	r2, [pc, #16]	; (8000350 <GPIO_init+0xe0>)
 8000340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000344:	60d3      	str	r3, [r2, #12]
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800
 8000350:	40020000 	.word	0x40020000

08000354 <delay>:

// 1000 = 2 seconds
void delay(int d){
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	int i;
	for(; d>0 ;d--){
 800035c:	e00c      	b.n	8000378 <delay+0x24>
		for(i =0; i<2657;i++);
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e002      	b.n	800036a <delay+0x16>
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f5b3 6f26 	cmp.w	r3, #2656	; 0xa60
 8000370:	ddf8      	ble.n	8000364 <delay+0x10>
	for(; d>0 ;d--){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3b01      	subs	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	dcef      	bgt.n	800035e <delay+0xa>
	}
}
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <SystemInit+0x20>)
 8000392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <SystemInit+0x20>)
 8000398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800039c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f7ff ffea 	bl	800038c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	; (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff ff0f 	bl	8000204 <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	2000001c 	.word	0x2000001c

08000400 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	; (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	; (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	; (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	; (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
