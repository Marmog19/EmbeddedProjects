
BareMetal_SOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000036c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000530  08000538  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000530  08000530  00010538  2**0
                  CONTENTS
  4 .ARM          00000000  08000530  08000530  00010538  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000530  08000538  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000538  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000538  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010538  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008ad  00000000  00000000  000105ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000253  00000000  00000000  00010e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  000110b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  00011138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b1e  00000000  00000000  00011191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e3c  00000000  00000000  00029caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b1af  00000000  00000000  0002aaeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000114  00000000  00000000  000b5c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b5db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000518 	.word	0x08000518

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000518 	.word	0x08000518

08000204 <main>:

void GPIO_init(void);
void delay(int);
void SosSignal(void);

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	GPIO_init();
 8000208:	f000 f81a 	bl	8000240 <GPIO_init>
    /* Loop forever */
	while(1){
		// To see if the button is pressed block the process in a do while loop

		do {
			GPIOA->ODR &= ~(1<<5);
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0x34>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <main+0x34>)
 8000212:	f023 0320 	bic.w	r3, r3, #32
 8000216:	6153      	str	r3, [r2, #20]
		} while (GPIOC->IDR & (1 << 13));
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <main+0x38>)
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1f3      	bne.n	800020c <main+0x8>
		do {
			SosSignal();
 8000224:	f000 f84a 	bl	80002bc <SosSignal>
		} while(GPIOC->IDR & (1 << 13)); // GPIOC->IDR
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <main+0x38>)
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000230:	2b00      	cmp	r3, #0
 8000232:	d1f7      	bne.n	8000224 <main+0x20>
	while(1){
 8000234:	e7ea      	b.n	800020c <main+0x8>
 8000236:	bf00      	nop
 8000238:	40020000 	.word	0x40020000
 800023c:	40020800 	.word	0x40020800

08000240 <GPIO_init>:
	}
}

void GPIO_init(void){
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	//Enable Clock Peripherals (GPIOA, GPIOC)
	RCC->AHB1ENR |= (1<<0); //Enables GPIOA peripheral (bit 0)
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <GPIO_init+0x70>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <GPIO_init+0x70>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<2); //Enables GPIOC peripheral (bit 2)
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <GPIO_init+0x70>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <GPIO_init+0x70>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6313      	str	r3, [r2, #48]	; 0x30

	// delay(1) 	// allow time for clock to start (???)

	/// GPIOA
    //Set GPIOA, PIN 5 as Output (MODER[11:10] = 01)
	GPIOA->MODER &= ~(1<<11); // clear bit 11
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <GPIO_init+0x74>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a14      	ldr	r2, [pc, #80]	; (80002b4 <GPIO_init+0x74>)
 8000262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<10);  // set bit 10
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <GPIO_init+0x74>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <GPIO_init+0x74>)
 800026e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000272:	6013      	str	r3, [r2, #0]

	// LED
	GPIOA->OTYPER &= ~(1<<5); //Sets GPIOA, PIN 5 as push-pull
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <GPIO_init+0x74>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <GPIO_init+0x74>)
 800027a:	f023 0320 	bic.w	r3, r3, #32
 800027e:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1<<5); //Initializes GPIOA, PIN 5 as HIGH
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <GPIO_init+0x74>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <GPIO_init+0x74>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6153      	str	r3, [r2, #20]

	/// Button
	//Set GPIOC, PIN 13 as Input (MODER[27:26] = 00)
	GPIOC->MODER &= ~(1<<27); // clear bit 27
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <GPIO_init+0x78>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <GPIO_init+0x78>)
 8000292:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1<<26); // clear bit 26
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <GPIO_init+0x78>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <GPIO_init+0x78>)
 800029e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020000 	.word	0x40020000
 80002b8:	40020800 	.word	0x40020800

080002bc <SosSignal>:
// Pressing the button starts SOS (Green LED flashes SOS).
//    S: Toggle light 3 times with 1/2 sec gap between ON..1/2sec..OFF
//    O: Toggle light 3 times with 2 sec gap between ON..2sec..OFF
//    S: Toggle light 3 times with 1/2 sec gap between ON..1/2sec..OFF
//    5 second delay between SOS
void SosSignal(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	// S
	GPIOA->ODR |= (1<<5); delay(250);
 80002c0:	4b56      	ldr	r3, [pc, #344]	; (800041c <SosSignal+0x160>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a55      	ldr	r2, [pc, #340]	; (800041c <SosSignal+0x160>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	20fa      	movs	r0, #250	; 0xfa
 80002ce:	f000 f8a7 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(250);
 80002d2:	4b52      	ldr	r3, [pc, #328]	; (800041c <SosSignal+0x160>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a51      	ldr	r2, [pc, #324]	; (800041c <SosSignal+0x160>)
 80002d8:	f023 0320 	bic.w	r3, r3, #32
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	20fa      	movs	r0, #250	; 0xfa
 80002e0:	f000 f89e 	bl	8000420 <delay>
	GPIOA->ODR |= (1<<5); delay(250);
 80002e4:	4b4d      	ldr	r3, [pc, #308]	; (800041c <SosSignal+0x160>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a4c      	ldr	r2, [pc, #304]	; (800041c <SosSignal+0x160>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6153      	str	r3, [r2, #20]
 80002f0:	20fa      	movs	r0, #250	; 0xfa
 80002f2:	f000 f895 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(250);
 80002f6:	4b49      	ldr	r3, [pc, #292]	; (800041c <SosSignal+0x160>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a48      	ldr	r2, [pc, #288]	; (800041c <SosSignal+0x160>)
 80002fc:	f023 0320 	bic.w	r3, r3, #32
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	20fa      	movs	r0, #250	; 0xfa
 8000304:	f000 f88c 	bl	8000420 <delay>
	GPIOA->ODR |= (1<<5); delay(250);
 8000308:	4b44      	ldr	r3, [pc, #272]	; (800041c <SosSignal+0x160>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a43      	ldr	r2, [pc, #268]	; (800041c <SosSignal+0x160>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6153      	str	r3, [r2, #20]
 8000314:	20fa      	movs	r0, #250	; 0xfa
 8000316:	f000 f883 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(250);
 800031a:	4b40      	ldr	r3, [pc, #256]	; (800041c <SosSignal+0x160>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a3f      	ldr	r2, [pc, #252]	; (800041c <SosSignal+0x160>)
 8000320:	f023 0320 	bic.w	r3, r3, #32
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	20fa      	movs	r0, #250	; 0xfa
 8000328:	f000 f87a 	bl	8000420 <delay>

	// O
	GPIOA->ODR |= (1<<5); delay(1000);
 800032c:	4b3b      	ldr	r3, [pc, #236]	; (800041c <SosSignal+0x160>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a3a      	ldr	r2, [pc, #232]	; (800041c <SosSignal+0x160>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6153      	str	r3, [r2, #20]
 8000338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033c:	f000 f870 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(1000);
 8000340:	4b36      	ldr	r3, [pc, #216]	; (800041c <SosSignal+0x160>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a35      	ldr	r2, [pc, #212]	; (800041c <SosSignal+0x160>)
 8000346:	f023 0320 	bic.w	r3, r3, #32
 800034a:	6153      	str	r3, [r2, #20]
 800034c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000350:	f000 f866 	bl	8000420 <delay>
	GPIOA->ODR |= (1<<5); delay(1000);
 8000354:	4b31      	ldr	r3, [pc, #196]	; (800041c <SosSignal+0x160>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a30      	ldr	r2, [pc, #192]	; (800041c <SosSignal+0x160>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000364:	f000 f85c 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(1000);
 8000368:	4b2c      	ldr	r3, [pc, #176]	; (800041c <SosSignal+0x160>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a2b      	ldr	r2, [pc, #172]	; (800041c <SosSignal+0x160>)
 800036e:	f023 0320 	bic.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000378:	f000 f852 	bl	8000420 <delay>
	GPIOA->ODR |= (1<<5); delay(1000);
 800037c:	4b27      	ldr	r3, [pc, #156]	; (800041c <SosSignal+0x160>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a26      	ldr	r2, [pc, #152]	; (800041c <SosSignal+0x160>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6153      	str	r3, [r2, #20]
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 f848 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(1000);
 8000390:	4b22      	ldr	r3, [pc, #136]	; (800041c <SosSignal+0x160>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a21      	ldr	r2, [pc, #132]	; (800041c <SosSignal+0x160>)
 8000396:	f023 0320 	bic.w	r3, r3, #32
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a0:	f000 f83e 	bl	8000420 <delay>

	// S
	GPIOA->ODR |= (1<<5); delay(250);
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <SosSignal+0x160>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a1c      	ldr	r2, [pc, #112]	; (800041c <SosSignal+0x160>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6153      	str	r3, [r2, #20]
 80003b0:	20fa      	movs	r0, #250	; 0xfa
 80003b2:	f000 f835 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(250);
 80003b6:	4b19      	ldr	r3, [pc, #100]	; (800041c <SosSignal+0x160>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a18      	ldr	r2, [pc, #96]	; (800041c <SosSignal+0x160>)
 80003bc:	f023 0320 	bic.w	r3, r3, #32
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	20fa      	movs	r0, #250	; 0xfa
 80003c4:	f000 f82c 	bl	8000420 <delay>
	GPIOA->ODR |= (1<<5); delay(250);
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <SosSignal+0x160>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <SosSignal+0x160>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6153      	str	r3, [r2, #20]
 80003d4:	20fa      	movs	r0, #250	; 0xfa
 80003d6:	f000 f823 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(250);
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <SosSignal+0x160>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a0f      	ldr	r2, [pc, #60]	; (800041c <SosSignal+0x160>)
 80003e0:	f023 0320 	bic.w	r3, r3, #32
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	20fa      	movs	r0, #250	; 0xfa
 80003e8:	f000 f81a 	bl	8000420 <delay>
	GPIOA->ODR |= (1<<5); delay(250);
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <SosSignal+0x160>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <SosSignal+0x160>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6153      	str	r3, [r2, #20]
 80003f8:	20fa      	movs	r0, #250	; 0xfa
 80003fa:	f000 f811 	bl	8000420 <delay>
	GPIOA->ODR &= ~(1<<5); delay(250);
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <SosSignal+0x160>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a06      	ldr	r2, [pc, #24]	; (800041c <SosSignal+0x160>)
 8000404:	f023 0320 	bic.w	r3, r3, #32
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	20fa      	movs	r0, #250	; 0xfa
 800040c:	f000 f808 	bl	8000420 <delay>

	// 5 sec pause
	delay(2500);
 8000410:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000414:	f000 f804 	bl	8000420 <delay>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40020000 	.word	0x40020000

08000420 <delay>:

void delay(int d){
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	int i;
	for(; d>0 ;d--){
 8000428:	e00c      	b.n	8000444 <delay+0x24>
		for(i =0; i<2657;i++);
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	e002      	b.n	8000436 <delay+0x16>
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f5b3 6f26 	cmp.w	r3, #2656	; 0xa60
 800043c:	ddf8      	ble.n	8000430 <delay+0x10>
	for(; d>0 ;d--){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3b01      	subs	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	dcef      	bgt.n	800042a <delay+0xa>
	}
}
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <SystemInit+0x20>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <SystemInit+0x20>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f7ff ffea 	bl	8000458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	; (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	; (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004aa:	f000 f811 	bl	80004d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f7ff fea9 	bl	8000204 <main>

080004b2 <LoopForever>:

LoopForever:
  b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c0:	08000538 	.word	0x08000538
  ldr r2, =_sbss
 80004c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c8:	2000001c 	.word	0x2000001c

080004cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <__libc_init_array>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	4d0d      	ldr	r5, [pc, #52]	; (8000508 <__libc_init_array+0x38>)
 80004d4:	4c0d      	ldr	r4, [pc, #52]	; (800050c <__libc_init_array+0x3c>)
 80004d6:	1b64      	subs	r4, r4, r5
 80004d8:	10a4      	asrs	r4, r4, #2
 80004da:	2600      	movs	r6, #0
 80004dc:	42a6      	cmp	r6, r4
 80004de:	d109      	bne.n	80004f4 <__libc_init_array+0x24>
 80004e0:	4d0b      	ldr	r5, [pc, #44]	; (8000510 <__libc_init_array+0x40>)
 80004e2:	4c0c      	ldr	r4, [pc, #48]	; (8000514 <__libc_init_array+0x44>)
 80004e4:	f000 f818 	bl	8000518 <_init>
 80004e8:	1b64      	subs	r4, r4, r5
 80004ea:	10a4      	asrs	r4, r4, #2
 80004ec:	2600      	movs	r6, #0
 80004ee:	42a6      	cmp	r6, r4
 80004f0:	d105      	bne.n	80004fe <__libc_init_array+0x2e>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f8:	4798      	blx	r3
 80004fa:	3601      	adds	r6, #1
 80004fc:	e7ee      	b.n	80004dc <__libc_init_array+0xc>
 80004fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000502:	4798      	blx	r3
 8000504:	3601      	adds	r6, #1
 8000506:	e7f2      	b.n	80004ee <__libc_init_array+0x1e>
 8000508:	08000530 	.word	0x08000530
 800050c:	08000530 	.word	0x08000530
 8000510:	08000530 	.word	0x08000530
 8000514:	08000534 	.word	0x08000534

08000518 <_init>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr

08000524 <_fini>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr
