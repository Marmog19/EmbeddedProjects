
BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  4 .ARM          00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000089b  00000000  00000000  00010453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000023a  00000000  00000000  00010cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000052  00000000  00000000  00010fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b1e  00000000  00000000  00010ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d83  00000000  00000000  00029b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b165  00000000  00000000  0002a89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000f8  00000000  00000000  000b5a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b5af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003c0 	.word	0x080003c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003c0 	.word	0x080003c0

08000204 <main>:
#include <stm32f4xx.h>

void GPIO_init(void);
void delay(int);

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	GPIO_init();
 8000208:	f000 f820 	bl	800024c <GPIO_init>

    /* Loop forever */
	while(1){
		if (GPIOC->IDR & (1<<13)) {
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <main+0x40>)
 800020e:	691b      	ldr	r3, [r3, #16]
 8000210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000214:	2b00      	cmp	r3, #0
 8000216:	d0f9      	beq.n	800020c <main+0x8>
			GPIOA->ODR |= (1<<5);
 8000218:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x44>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <main+0x44>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
			delay(1000);
 8000224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000228:	f000 f84e 	bl	80002c8 <delay>
			GPIOA->ODR &= ~(1<<5);
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <main+0x44>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a05      	ldr	r2, [pc, #20]	; (8000248 <main+0x44>)
 8000232:	f023 0320 	bic.w	r3, r3, #32
 8000236:	6153      	str	r3, [r2, #20]
			delay(1000);
 8000238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023c:	f000 f844 	bl	80002c8 <delay>
		if (GPIOC->IDR & (1<<13)) {
 8000240:	e7e4      	b.n	800020c <main+0x8>
 8000242:	bf00      	nop
 8000244:	40020800 	.word	0x40020800
 8000248:	40020000 	.word	0x40020000

0800024c <GPIO_init>:
		}
	}
}
void GPIO_init(void){
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	//Enable Peripherals (GPIOA, GPIOC)
	RCC->AHB1ENR |= (1<<0); //Enables GPIOA peripheral (bit 0)
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <GPIO_init+0x70>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a19      	ldr	r2, [pc, #100]	; (80002bc <GPIO_init+0x70>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<2); //Enables GPIOC peripheral (bit 2)
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <GPIO_init+0x70>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000260:	4a16      	ldr	r2, [pc, #88]	; (80002bc <GPIO_init+0x70>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6313      	str	r3, [r2, #48]	; 0x30

    //Set GPIOA, PIN 5 as Output (MODER[11:10] = 01)
	GPIOA->MODER &= ~(1<<11); // clear bit 11
 8000268:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <GPIO_init+0x74>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a14      	ldr	r2, [pc, #80]	; (80002c0 <GPIO_init+0x74>)
 800026e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<10);  // set bit 10
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <GPIO_init+0x74>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <GPIO_init+0x74>)
 800027a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800027e:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~(1<<5); //Sets GPIOA, PIN 5 as push-pull
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <GPIO_init+0x74>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <GPIO_init+0x74>)
 8000286:	f023 0320 	bic.w	r3, r3, #32
 800028a:	6053      	str	r3, [r2, #4]

	GPIOA->ODR |= (1<<5); //Initializes GPIOA, PIN 5 as HIGH
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <GPIO_init+0x74>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <GPIO_init+0x74>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6153      	str	r3, [r2, #20]

	//Set GPIOC, PIN 13 as Input (MODER[27:26] = 00)
	GPIOC->MODER &= ~(1<<27); // clear bit 27
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <GPIO_init+0x78>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a09      	ldr	r2, [pc, #36]	; (80002c4 <GPIO_init+0x78>)
 800029e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1<<26); // clear bit 26
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <GPIO_init+0x78>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <GPIO_init+0x78>)
 80002aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40020800 	.word	0x40020800

080002c8 <delay>:

void delay(int d){
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	int i;
	for(; d>0 ;d--){
 80002d0:	e00c      	b.n	80002ec <delay+0x24>
		for(i =0; i<2657;i++);
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	e002      	b.n	80002de <delay+0x16>
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	f5b3 6f26 	cmp.w	r3, #2656	; 0xa60
 80002e4:	ddf8      	ble.n	80002d8 <delay+0x10>
	for(; d>0 ;d--){
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	dcef      	bgt.n	80002d2 <delay+0xa>
	}
}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemInit+0x20>)
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <SystemInit+0x20>)
 800030c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f7ff ffea 	bl	8000300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff55 	bl	8000204 <main>

0800035a <LoopForever>:

LoopForever:
  b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	2000001c 	.word	0x2000001c

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	; (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	; (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	; (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	; (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
